@(cmbEnabled: Boolean)
---
openapi: 3.0.3
info:
  title: Push Pull Notifications
  contact: {}
  version: '1.0'
servers:
  - url: https://test-api.service.hmrc.gov.uk/misc/push-pull-notification
    description: Sandbox
  - url: https://api.service.hmrc.gov.uk/misc/push-pull-notification
    description: Production
    variables: {}
paths:
  "/box/{boxId}/notifications":
    get:
      tags:
      - push-pull-notification-api
      summary: Get a list of notifications
      description: Returns a list of notifications that have been sent to a box. <br><br>A
        maximum of 100 notifications will be returned. These will be ordered oldest
        first. <br><br>The OAuth bearer token used by this endpoint must have the
        scope `read:pull-notifications`.
      operationId: Getalistofnotifications
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - name: boxId
        in: path
        description: Unique identifier for a box
        required: true
        style: simple
        schema:
          type: string
          example: 50dca3fc-c37c-4f03-b719-63571333624c
      - name: status
        in: query
        description: Only return notifications with this status.<br>Either `PENDING`,
          `FAILED` or `ACKNOWLEDGED`.
        style: form
        explode: true
        schema:
          type: string
          example: FAILED
      - name: fromDate
        in: query
        description: Only return notifications created after this datetime.<br>ISO-8601
          UTC date and time.
        style: form
        explode: true
        schema:
          type: string
          example: '2020-06-03T14:20:54.987'
      - name: toDate
        in: query
        description: Only return notifications created before this datetime.<br>ISO-8601
          UTC date and time.
        style: form
        explode: true
        schema:
          type: string
          example: '2020-06-03T14:20:54.987'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Listofnotification"
                description: ''
                example:
                - notificationId: 1ed5f407-8096-40d1-87ef-9a2a103eeb85
                  boxId: 50dca3fc-c37c-4f03-b719-63571333624c
                  messageContentType: application/json
                  message: '{"key":"value"}'
                  status: PENDING
                  createdDateTime: '2020-06-01T10:20:23.160+0000'
                - notificationId: 86bb5f82-452e-49c8-88af-1f321d573960
                  boxId: 50dca3fc-c37c-4f03-b719-63571333624c
                  messageContentType: application/xml
                  message: "<someXml>xmlValue</someXml>"
                  status: PENDING
                  createdDateTime: '2020-06-02T10:27:33.613+0000'
              example:
              - notificationId: 1ed5f407-8096-40d1-87ef-9a2a103eeb85
                boxId: 50dca3fc-c37c-4f03-b719-63571333624c
                messageContentType: application/json
                message: '{"key":"value"}'
                status: PENDING
                createdDateTime: '2020-06-01T10:20:23.160+0000'
              - notificationId: 86bb5f82-452e-49c8-88af-1f321d573960
                boxId: 50dca3fc-c37c-4f03-b719-63571333624c
                messageContentType: application/xml
                message: "<someXml>xmlValue</someXml>"
                status: PENDING
                createdDateTime: '2020-06-02T10:27:33.613+0000'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/errorResponse"
              examples:
                example-1:
                  description: The box identifier is not valid
                  value:
                    {
                      "code": "BAD_REQUEST",
                      "message": "Expecting text/json or application/json body"
                    }
        '403':
          description: Forbidden
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/errorResponse"
              examples:
                example-1:
                  description: You do not have access to the specified box
                  value:
                    {
                      "code": "FORBIDDEN",
                      "message": "Authorisation failed"
                    }

        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/errorResponse"
              examples:
                example-1:
                  description: The unique identifier for the box does not exist
                  value:
                    {
                      "code": "BOX_NOT_FOUND",
                      "message": "Box not found"
                    }
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/errorResponse"
              examples:
                example-1:
                  description: The accept header is missing or invalid
                  value:
                    {
                      "code": "ACCEPT_HEADER_INVALID",
                      "message": "The accept header is missing or invalid"
                    }
      deprecated: false
      security:
        - applicationRestricted:
            - read:pull-notifications
  "/box/{boxId}/notifications/acknowledge":
    put:
      tags:
      - push-pull-notification-api
      summary: Acknowledge a list of notifications
      description: Updates the status of one or more notifications to `ACKNOWLEDGED`.
        <br><br>A maximum of 100 notifications will be updated. <br><br>The OAuth
        bearer token used by this endpoint must have the scope `write:notifications`.
      operationId: Acknowledgealistofnotifications
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/contentTypeHeader'
      - name: boxId
        in: path
        description: Unique identifier for a box
        required: true
        style: simple
        schema:
          type: string
          example: 50dca3fc-c37c-4f03-b719-63571333624c
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - "$ref": "#/components/schemas/Acknowledgealistofnotifications"
              - example:
                  notificationIds:
                  - 50dca3fc-c37c-4f03-b719-63571333624c
                  - 86bb5f82-452e-49c8-88af-1f321d573960
            example:
              notificationIds:
              - 50dca3fc-c37c-4f03-b719-63571333624c
              - 86bb5f82-452e-49c8-88af-1f321d573960
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/errorResponse"
              examples:
                example-1:
                  description: The request body does not match the specification
                  value:
                    {
                      "code": "INVALID_REQUEST_PAYLOAD",
                      "message": "Invalid / Unknown query parameter provided"
                    }
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/errorResponse"
              examples:
                example-1:
                  description: The unique identifier for the box does not exist
                  value:
                    {
                      "code": "BOX_NOT_FOUND",
                      "message": "Box not found"
                    }
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/errorResponse"
              examples:
                example-1:
                  description: The Accept header is missing or invalid
                  value:
                    {
                      "code": "ACCEPT_HEADER_INVALID",
                      "message": "The accept header is missing or invalid"
                    }
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/errorResponse"
              examples:
                example-1:
                  description: The Content-Type header is incorrect
                  value:
                    {
                      "code": "BAD_REQUEST",
                      "message": "Expecting text/json or application/json body"
                    }
      deprecated: false
      security:
        - applicationRestricted:
            - write:notifications
@if(cmbEnabled) {
  "/cmb/box":
    put:
      tags:
      - push-pull-notification-api
      summary: Create a client managed box
      description: Create a client managed box with the given box name. <br><br>The
        OAuth bearer token used by this endpoint must have the scope `write:ppns-boxes`.
      operationId: Createaclientmanagedbox
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/contentTypeHeader'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - "$ref": "#/components/schemas/Createaclientmanagedbox"
              - example:
                  boxName: My first box
            example:
              boxName: My first box
        required: true
      responses:
        '200':
          description: 'Box with given name already exists'
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/Createdaclientmanagedbox"
              example:
                boxId: 105ca34d-7a45-4df4-9fcf-9685b53799ab
        '201':
          description: 'New box created'
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/Createdaclientmanagedbox"
              example:
                boxId: 105ca34d-7a45-4df4-9fcf-9685b53799ab
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/errorResponse"
              examples:
                example-1:
                  description: JSON body is invalid against expected format
                  value:
                    {
                      "code": "INVALID_REQUEST_PAYLOAD",
                      "message": "Invalid / Unknown query parameter provided"
                    }
        '415':
          description: Unsupported Media Type
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/frameworkErrorResponse"
              examples:
                example-1:
                  description: Expecting text/json or application/json body
                  value:
                    {
                      "statusCode": 400,
                      "message": "Expecting text/json or application/json body"
                    }
      deprecated: false
      security:
        - applicationRestricted:
            - write:ppns-boxes
    get:
      tags:
      - push-pull-notification-api
      summary: Get a list of boxes
      description: Returns a list of boxes belonging to a specific Client ID which
        is passed in via auth. <br><br>The OAuth bearer token used by this endpoint
        must have the scope `read:ppns-boxes`.
      operationId: Getalistofboxes
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/listofbox"
                description: ''
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/errorResponse"
              examples:
                example-1:
                  description: The Accept header is missing or invalid
                  value:
                    {
                      "code": "ACCEPT_HEADER_INVALID",
                      "message": "The accept header is missing or invalid"
                    }
      deprecated: false
      security:
        - applicationRestricted:
            - read:ppns-boxes
  "/cmb/box/{boxId}":
    delete:
      tags:
      - push-pull-notification-api
      summary: Delete a client managed box
      description: Delete a client managed box when given a valid boxId. <br><br>The
        OAuth bearer token used by this endpoint must have the scope `write:ppns-boxes`.
      operationId: Deleteaclientmanagedbox
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - name: boxId
        in: path
        description: Unique identifier for a box
        required: true
        style: simple
        schema:
          type: string
          example: 50dca3fc-c37c-4f03-b719-63571333624c
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                - "$ref": "#/components/schemas/errorResponse"
              examples:
                example-1:
                  description: Box not found
                  value:
                    {
                      "code": "BOX_NOT_FOUND",
                      "message": "Box not found"
                    }
      deprecated: false
      security:
        - applicationRestricted:
            - write:ppns-boxes
}
components:
  securitySchemes:
    applicationRestricted:
      type: oauth2
      description: |
        HMRC supports OAuth 2.0 for authenticating user-restricted API requests using an OAuth 2.0 Bearer Token in the
        AUTHORIZATION header.
        See https://developer.service.hmrc.gov.uk/api-documentation/docs/authorisation/user-restricted-endpoints for details.
      flows:
        clientCredentials:
          tokenUrl: https://api.service.hmrc.gov.uk/oauth/token
          scopes:
            read:pull-notifications: Grant read only access to list notifications
            write:notifications: Grant write access to acknowledge notifications
            @if(cmbEnabled) {
            read:ppns-boxes: Grant read only access to list ppns boxes
            write:ppns-boxes: Grant write access to update or delete ppns boxes
            }
  parameters:
    acceptHeader:
      name: Accept
      in: header
      description: |
        Specifies the response format and the [version](/api-documentation/docs/reference-guide#versioning) of the API to be used.

        For example: application/vnd.hmrc.1.0+json
      schema:
        type: string
        enum: [
            "application/vnd.hmrc.1.0+json"
        ]
      required: true
    contentTypeHeader:
      name: Content-Type
      in: header
      description:
        The media type of the request body. This must be application/json.
      schema:
        type: string
        enum: [
            "application/json"
        ]
      required: true
  schemas:
    frameworkErrorResponse:
      title: errorResponse
      required:
      - statusCode
      - message
      type: object
      properties:
        statusCode:
          type: integer
          description: the HTTP status code
        message:
          type: string
          description: the error description
    errorResponse:
      title: errorResponse
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: the error code
        message:
          type: string
          description: the error description
    Acknowledgealistofnotifications:
      title: Acknowledgealistofnotifications
      required:
      - notificationIds
      type: object
      properties:
        notificationIds:
          type: array
          items:
            type: string
          description: Notification
    Createaclientmanagedbox:
      title: Createaclientmanagedbox
      required:
      - boxName
      type: object
      properties:
        boxName:
          type: string
          description: Box Name
          example: client ppns box
    Createdaclientmanagedbox:
      title: Createdaclientmanagedbox
      required:
      - boxId
      type: object
      properties:
        boxId:
          type: string
          description: Box ID
          example: 105ca34d-7a45-4df4-9fcf-9685b53799ab
    listofbox:
      title: listofbox
      required:
      - boxId
      - boxName
      - boxCreator.clientId
      - applicationId
      - subscriber.callBackUrl
      - subscriber.subscribedDateTime
      - subscriber.subscriptionType
      - clientManaged
      type: object
      properties:
        boxId:
          type: string
          description: Unique identifier for a box the notification was sent to.
          example: 50dca3fc-c37c-4f03-b719-63571333624c
        boxName:
          type: string
          description: The boxName will be returned as "DEFAULT" if clientManaged
            is false
          example: client ppns box
        boxCreator.clientId:
          type: string
          description: Developer Hub Application Client ID, that created and has access
            to this box
          example: A7JXjYo6Wn13k3l5SDBlV2Qgimsu
        applicationId:
          type: string
          description: The application ID of the created box
          example: 6722217f-25ce-423a-93cd-4d3d0c8af11c
        subscriber.callBackUrl:
          type: string
          description: The URL of the endpoint where push notifications will be sent
        subscriber.subscribedDateTime:
          type: string
          description: ISO-8601 UTC date and time that the subscription was created
          example: '2022-06-15T14:24:24.385+0000'
        subscriber.subscriptionType:
          type: string
          description: The type of subscriber. Currently only API_PUSH_SUBSCRIBER
            is supported
          example: API_PULL_SUBSCRIBER
        clientManaged:
          type: boolean
          description: Boolean value to show if the box is client managed
          example: true
      description: Get a list of boxes
    Listofnotification:
      title: Listofnotification
      required:
      - notificationId
      - boxId
      - messageContentType
      - message
      - status
      - createdDateTime
      type: object
      properties:
        notificationId:
          type: string
          description: Unique identifier for a notification.
          example: 86bb5f82-452e-49c8-88af-1f321d573960
        boxId:
          type: string
          description: Unique identifier for a box the notification was sent to.
          example: 50dca3fc-c37c-4f03-b719-63571333624c
        messageContentType:
          allOf:
          - "$ref": "#/components/schemas/MessageContentType"
          - description: Content type of the message.
        message:
          type: string
          description: The notification message defined by messageContentType (JSON
            or XML). If this is JSON then it will have been escaped. Details on the
            structure of this data can be found in the documentation for the HMRC
            API that created the notification.
          example: '{\"key\":\"value\"}'
        status:
          allOf:
          - "$ref": "#/components/schemas/Status"
          - description: Status of the notification.
        createdDateTime:
          type: string
          description: ISO-8601 UTC date and time the notification was created.
          example: '2020-06-01T10:27:33.613+0000'
      description: Notification
    MessageContentType:
      title: MessageContentType
      enum:
      - application/json
      - application/xml
      type: string
      description: Content type of the message.
    Status:
      title: Status
      enum:
      - PENDING
      - FAILED
      - ACKNOWLEDGED
      type: string
      description: Status of the notification.